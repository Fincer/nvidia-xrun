#!/bin/bash

# nvidia-xrun - Utility to run separate X with discrete nvidia graphics with full performance
# Copyright (C) 2018  Witko
# Copyright (C) 2018  Pekka Helenius (~Fincer)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# TODO Support init.d? Especially Gentoo users in mind
# TODO Replace systemd getty stuff with openvt?

# BUG: in some cases, Nvidia TTY does not automatically change back to the original TTY session. When the script terminates, Nvidia GPU may stay ON, too. This can happen when user boots up computer, logs in Xorg session and immediately runs the script.
# BUG: In some cases, the script attempts to switch to Nvidia TTY session but fails in that. Re-running the script may succeed.
# BUG: black screen in graphically intense apps when switching between TTYs.

###########################################################
# Essential commands

COMMANDS=(
  agetty
  awk
  cat
  chvt
  grep
  id
  ls
  lsmod
  modprobe
  ps
  realpath
  rmmod
  sleep
  sudo
  tail
  tee
  ttyecho
  who
  xinit
)

###########################################################
# Check for command dependencies

function checkCommands() {

    if [[ $(which --help 2>/dev/null) ]] && [[ $(echo --help 2>/dev/null) ]]; then

        local a=0
        for command in ${@}; do
            if [[ ! $(which $command 2>/dev/null) ]]; then
                COMMANDS_NOTFOUND[$a]=$command
                let a++
            fi
        done

        if [[ -n $COMMANDS_NOTFOUND ]]; then
            echo -e "\nError! The following commands could not be found: ${COMMANDS_NOTFOUND[*]}\nAborting\n"
            exit 1
        fi
    else
        exit 1
    fi
}

checkCommands "${COMMANDS[*]}"

###########################################################
# Check who I truly am

USER_NAME=$(who -m | awk '{print $1}')

# Get current user UID
USER_ID=`id -u ${USER_NAME}`

###########################################################
# Check if we are root or not.

if [[ ${USER_NAME} != "root" ]] && [[ ${UID} -ne 0 ]]; then
  echo "Please run this program as regular user using sudo."
  exit 1
elif [[ ${USER_NAME} == "root" ]] && [[ ${UID} -eq 0 ]]; then
  echo "Please run this program as regular user using sudo. Do not use root."
  exit 1
fi

###########################################################
# Help message

function printHelp {
  echo "Usage: "
  echo -e "\nsudo nvidia-xrun [<app>]\nOptions:\n\t-h, --help\tThis help text\n\t-u, --unload\tUnload Nvidia GPU\n"
}

###########################################################
# Set user input arguments

a=0
for arg in ${@}; do
  args[$i]=${arg}
  let i++
done

unset a

###########################################################
# Get user input arguments

function getArguments() {

  if [[ -n "${args[*]}" ]]; then

    # Test if executable exists in path
    if [[ -x "$(which "${args[0]}" 2> /dev/null)" ]]; then

      # Generate exec line
      EXECL="$(which "${args[0]}")"

    # Test if executable exists on disk
    elif [[ -e "$(realpath "${args[0]}")" ]]; then

      # Generate exec line
      EXECL="$(realpath "${args[0]}")"

    else
      echo "${args[0]}: No such executable!"
      exit 1
    fi

    #shift 1
    #EXECL="$EXECL ${args[*]}"

  # Exit the script if no arguments passed
  else
    echo "No valid input arguments given!"
    printHelp
    exit 1
  fi

  if [[ -f /etc/X11/xinit/nvidia-xinitrc ]]; then
    EXECL="/etc/X11/xinit/nvidia-xinitrc $EXECL"
  else
    echo "Can't find file '/etc/X11/xinit/nvidia-xinitrc'. Aborting."
    exit 1
  fi

}

###########################################################
# Check existence of bbswitch

if [[ $(echo $(lsmod | grep bbswitch > /dev/null)$?) -eq 1 ]]; then
  echo "Kernel module 'bbswitch' is not loaded. Aborting"
  exit 1
fi

###########################################################
# Execute functions

function execute() {
  bash -c "${1}"
}

function execute_user() {
  sudo -u \#${USER_ID} -- bash -c "${1}"
}

###########################################################
# Calculate the first usable TTY

function findTTY() {

  # Get all already used system TTYs and list them in TTY_RESERVED array
  function reservedTTY() {

    local IFS=$'\n'
    local i=0

    for tty in $(who | grep tty | awk '{print $2}'); do
      TTY_RESERVED[$i]=${tty}
      let i++
    done

  }

  # Get all available system TTYs and list them in TTY_ALL array
  function allTTY() {

    # Get available TTYs using systemd logind.conf settings
    # See https://www.freedesktop.org/software/systemd/man/logind.conf.html
    #
    if [[ -f /etc/systemd/logind.conf ]]; then
      TTY_COUNT=`grep -m 1 NAutoVTs /etc/systemd/logind.conf | grep -Eo "[0-9]*"`
    else

      # Default TTY count
      TTY_COUNT=6
    fi

    # First available TTY for user is 1, not 0. Thus i=1
    for ((i=1;i<=TTY_COUNT;i++)); do
      TTY_ALL[$i]="tty$i"
    done

  }

  # Find all existing TTY overrides in the system and put them into a new array TTY_OVERRIDES
  function existingTTYoverrides() {

    if [[ -d /etc/systemd/system ]]; then

      local i=0

      for tty_override in $(ls /etc/systemd/system | grep -oE "tty[0-9]"); do
        TTY_OVERRIDES[$i]=${tty_override}
        let i++
      done

    fi

  }

  function ttyCleanup() {

    # Delete all reserved tty's from TTY_ALL array
    for i in "${TTY_RESERVED[@]}"; do
      TTY_ALL=(${TTY_ALL[@]//*$i*})
    done

    if [[ -n TTY_OVERRIDES ]]; then
      # Delete all overridden tty's from TTY_ALL array
      for i in "${TTY_OVERRIDES[@]}"; do
        TTY_ALL=(${TTY_ALL[@]//*$i*})
      done
    fi

    if [[ -z TTY_ALL ]]; then
      echo "Error: Couldn't find any free TTY sessions. Aborting."
      exit 1
    fi

    # Get the first available TTY and set it into NVIDIA_TTY variable
    NVIDIA_TTY=${TTY_ALL[0]}
    NVIDIA_TTY_NUM=`echo $NVIDIA_TTY | sed 's/[a-z]//g'`

    # Unset temporary arrays
    unset TTY_ALL
    unset TTY_RESERVED
    unset TTY_OVERRIDES

    echo "Running Nvidia in TTY session ${NVIDIA_TTY_NUM}"
    echo "Press Alt + Ctrl + F${NVIDIA_TTY_NUM} to switch"
  }

  reservedTTY
  allTTY
  existingTTYoverrides
  ttyCleanup

}

###########################################################
# Calculate the first usable display

function findDisplay() {

  XNUM=-1
  SOCK="something"
  while [[ -n "$SOCK" ]]; do
    XNUM=$(( $XNUM + 1 ))
    SOCK=$(ls -A1 /tmp/.X11-unix | grep "X$XNUM")
  done

  NEWDISP=":$XNUM"

}

###########################################################
# Set TTY session overrides & enable the new TTY for use

function setTTYoverride() {

  if [[ -n NVIDIA_TTY ]]; then

    if [[ ! -d /etc/systemd/system/getty@${NVIDIA_TTY}.service.d ]]; then
      execute "mkdir -p /etc/systemd/system/getty@${NVIDIA_TTY}.service.d"
    fi

  else
    echo "Error! Couldn't determine a free TTY session."
    exit 1
  fi

  execute "chmod 0755 /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/"

#####
execute "cat <<TTY_MSG > /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/issue

nvidia-xrun [${NVIDIA_TTY}]: Press Ctrl + Alt + F${CUR_VT} to switch back.

TTY_MSG"
#####

#####
execute "cat <<TTY_OVERRIDE > /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/override.conf
[Service]
ExecStart=
ExecStart=-/usr/bin/agetty --autologin ${USER_NAME} --noclear -f /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/issue %I $TERM
TTY_OVERRIDE"
#####

  execute "chmod 0644 /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/override.conf"

}

function loadTTYsession() {
  execute "systemctl restart getty@${NVIDIA_TTY}.service"

  if [[ $(systemctl is-active getty@${NVIDIA_TTY}.service) == inactive ]]; then
    echo "Error! Couldn't activate a new TTY session."
    execute "rm -Rf /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/"
    exit 1
  fi
}

###########################################################
# Enable GPU

function enableGPU() {

  # Turn on Nvidia GPU
  echo 'Waking up Nvidia GPU'
  if ! [[ -f /proc/acpi/bbswitch ]]; then
    execute "modprobe bbswitch"
  fi
  execute "tee /proc/acpi/bbswitch <<<ON &> /dev/null"

  # Load Nvidia kernel modules
  # NOTE: We need to load these individually!
  echo 'Loading Nvidia kernel modules'
  execute "modprobe nvidia 2>/dev/null"
  execute "modprobe nvidia_modeset 2>/dev/null"
  execute "modprobe nvidia_drm 2>/dev/null"

}

###########################################################
# Disable GPU

function disableGPU() {
  # Unload Nvidia kernel modules
  # NOTE: We need to unload these individually!
  echo 'Unloading Nvidia kernel modules'
  execute "rmmod nvidia_drm 2>/dev/null"
  execute "rmmod nvidia_modeset 2>/dev/null"
  execute "rmmod nvidia 2>/dev/null"

  # Turn off Nvidia GPU
  if [[ -f /proc/acpi/bbswitch ]]; then
    echo 'Turning off Nvidia GPU'

    local c=3
    while [[ $c -ge 0 ]]; do
      execute "tee /proc/acpi/bbswitch <<<OFF &> /dev/null"
      if [[ $(cat /proc/acpi/bbswitch) == *"OFF"* ]]; then
        break
      fi
      sleep 1
      let c--
    done

    if [[ $(cat /proc/acpi/bbswitch) == *"ON"* ]]; then
      echo "Warning: Couldn't turn off Nvidia GPU."
    fi

    echo "Current state of Nvidia GPU: $(cat /proc/acpi/bbswitch | awk '{print $NF}')"
  else
    echo "bbswitch kernel module not loaded."
  fi

  if [[ -n "$NVIDIA_TTY_NUM" ]]; then
    # Log out from the new TTY session
    echo "Logging out from graphical TTY ${NVIDIA_TTY_NUM}..."
  fi
}

###########################################################
# Script arguments

if [[ $1 == "-h" ]] || [[ $1 == "--help" ]] || [[ -z $1 ]]; then
  echo "Utility to run games and applications in separate X on discrete Nvidia graphic card"
  printHelp
  exit 0

elif [[ $1 == "-u" ]] || [[ $1 == "--unload" ]]; then

  if [[ $(echo $(grep ON /proc/acpi/bbswitch > /dev/null)$?) -eq 0 ]]; then
    disableGPU
    exit 0
  else
    echo "Nvidia GPU already unloaded."
    exit 0
  fi

else
  getArguments
fi

###########################################################

function removeTTY() {

  # Stop the Nvidia TTY session
  execute "systemctl stop getty@${NVIDIA_TTY}.service"

  # Remove Nvidia TTY overrides
  execute "rm -Rf /etc/systemd/system/getty@${NVIDIA_TTY}.service.d/"

}

###########################################################
# Current VT session

function currentVT() {

  CUR_VT=`grep -oE "[0-9]" /sys/class/tty/tty0/active`

  # We set CUR_VT variable in anyway to avoid some wierd behavior 
  # when determining CUR_XORG_PID variable
  if [[ $CUR_VT = "" ]]; then
    CUR_VT="none"
  fi

}

currentVT

###########################################################
# Current Xorg PID

CUR_XORG_PID=`ps h -o tty -o pid -C Xorg | grep "tty${CUR_VT}" | awk '{print $2}'`

###########################################################
# Emergency exit behavior (Ctrl + C // SIGINT)

function emergency() {
  trap SIGINT
  disableGPU
#  if [[ $(echo $(${CUR_XORG_PID})$?) -ne 0 ]]; then
  if [[ $CUR_XORG_PID != "" ]]; then
    execute "chvt $CUR_VT"
    removeTTY
  fi
  exit 0
}

###########################################################
# Allow interruption of the script at any time (Ctrl + C)
trap "emergency" INT

###########################################################
###########################################################
# RUN MOST OF THE SCRIPT FUNCTIONS HERE

# Enable Nvidia GPU
enableGPU

if [[ $CUR_XORG_PID != "" ]]; then
  # Find first available TTY session for Nvidia GPU
  findTTY

  # Set TTY session configuration override for Nvidia GPU
  setTTYoverride

  # Load the new TTY session
  loadTTYsession
else
  NVIDIA_TTY="tty${CUR_VT}"
  NVIDIA_TTY_NUM=${CUR_VT}
fi

# Find usable display
findDisplay

# Set command to execute new X session
XRUN_COMMAND="xinit ${EXECL} -- $NEWDISP vt${NVIDIA_TTY_NUM} -nolisten tcp -br -config nvidia-xorg.conf -configdir nvidia-xorg.conf.d"

if [[ $CUR_XORG_PID != "" ]]; then
  # Switch to the new TTY session
  execute "chvt ${NVIDIA_TTY_NUM}"
  sleep 4
  execute "ttyecho -n /dev/${NVIDIA_TTY} ${XRUN_COMMAND}"
else
  execute_user "${XRUN_COMMAND}"
fi

# Get Nvidia Xorg server PID and wait for it to finish
echo "nvidia-xrun PID: $$"
if [[ $CUR_XORG_PID != "" ]]; then
  NVIDIA_XORG_PID=`ps h -o tty -o pid -C Xorg | grep "${NVIDIA_TTY}" | awk '{print $2}'`
  echo "Nvidia session Xorg PID: ${NVIDIA_XORG_PID}"
  tail --pid=${NVIDIA_XORG_PID} -f /dev/null 2> /dev/null
fi

# Disable Nvidia GPU
disableGPU

if [[ $CUR_XORG_PID != "" ]]; then
  # Switch back to the default VT
  execute "chvt ${CUR_VT}"

  # Remove TTY overrides
  removeTTY
fi

# Exit the script
exit 0

trap SIGINT
